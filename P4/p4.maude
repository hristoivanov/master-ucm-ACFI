mod TABLA is
  pr CONFIGURATION .
  pr STRING .

  sort Entrada .
  op <_,_> : String Oid -> Entrada [ctor] .
  sort Tabla .
  subsort Entrada < Tabla .
  op nTabla : -> Tabla [ctor] .
  op __ : Tabla Tabla -> Tabla [ctor assoc comm id: nTabla] .

  op insert : Tabla Entrada -> Tabla .
  eq insert(< S, O > T, < S, O' >) = < S, O' > T .
  eq insert(T, < S', O' >) = T < S', O' >  [owise] .

  op delete : Tabla String -> Tabla .
  eq delete(< S, O > T, S) = T .
  eq delete(T, S) = T [owise] .

  vars O O' : Oid .
  vars S S' : String .
  var  E    : Entrada .
  vars T T' : Tabla .

  ***ops auxidle auxactive : -> Oid  .
endm 

***(
red insert( nTabla, < "aa", auxactive > ) .
red insert( < "aa", auxidle >  < "bb", auxidle > < "cc", auxidle > < "dd", auxidle > nTabla, < "aa", auxactive > ) .
red insert( < "aa", auxidle >  < "bb", auxidle > < "cc", auxidle > < "dd", auxidle > nTabla, < "dd", auxactive > ) .
red insert( < "aa", auxidle >  < "bb", auxidle > < "cc", auxidle > < "dd", auxidle > nTabla, < "cc", auxactive > ) .
red insert( < "aa", auxidle >  < "bb", auxidle > < "cc", auxidle > < "dd", auxidle > nTabla, < "rr", auxactive > ) .

red delete( nTabla,  "aa" ) .
red delete( < "aa", auxidle >  < "bb", auxidle > < "cc", auxidle > < "dd", auxidle > nTabla,  "aa" ) .
red delete( < "aa", auxidle >  < "bb", auxidle > < "cc", auxidle > < "dd", auxidle > nTabla,  "dd" ) .
red delete( < "aa", auxidle >  < "bb", auxidle > < "cc", auxidle > < "dd", auxidle > nTabla,  "cc" ) .
red delete( < "aa", auxidle >  < "bb", auxidle > < "cc", auxidle > < "dd", auxidle > nTabla,  "rr" ) .
)***

load model-checker.maude
load full-maude.maude

(omod RED is
  pr QID .
  pr TABLA .

  subsort Qid < Oid .

  vars O O' O'' O''' : Oid .
  vars B B' : Object .
  vars S S' : String .
  var  T    : Tabla .
  var  E    : Entrada .
  var  C    : Configuration .
  vars Q Q' : Qid .
  var Ca    : Cid .
  vars Ats Ats' : AttributeSet .
  vars MSG MSG' : Msg .
  vars lstMsg lstMsg' : listaMsg .
  vars N N' : Nodo .

  *** 1
  class Proceso | datos : Configuration .

  *** 2, 10, 11
  class Nodo | IP : String, Estado : Mode, recibido : String, amigos : CjtoString .
  sort Mode .
  ops inactivo esperando activo : -> Mode [ctor] .
  op n : Oid -> Oid [ctor] .

  *** 3
  subclass Centro < Nodo .
  class Centro  | tabla : Tabla .

  *** 4
  subclass Extremo < Nodo .
  class Extremo | centro : Oid .
  op null : -> Oid [ctor] .

  *** 5
  class Canal   | origen : Oid, destino : Oid, listaOrigen : listaMsg, listaDestino : listaMsg, estado : EstadoCanal .
  sort listaMsg .
  subsort Msg < listaMsg .
  op nlistaMsg : -> listaMsg [ctor] .
  op _y_ : listaMsg listaMsg -> listaMsg [ctor assoc id: nlistaMsg] .
  sort EstadoCanal .
  ops ok error : -> EstadoCanal [ctor] .

  *** 6 (y pequeña parte del 7)
  msg info : Entrada -> Msg .
  rl [info1] :
     < O : Extremo | Estado : inactivo, IP : S > 
  => < O : Extremo | Estado : esperando >
     info(< S, O >) .
  rl [info2] :
     info(< S, O >)
     < O' : Centro | tabla : T >
  => < O' : Centro | tabla : insert(T, < S, O >), Estado : activo > 
     respuesta-info(O, O') .

  *** 7
  msg respuesta-info : Oid Oid -> Msg .
  rl [respuesta-info1] :
     respuesta-info(O, O')
     < O : Extremo | Estado : esperando >
  => < O : Extremo | Estado : activo, centro : O' > .

  *** 9
  sort CjtoString . 
  subsort String < CjtoString .
  op nCjtoString : -> CjtoString [ctor] .
  op __ : CjtoString CjtoString -> CjtoString [ctor assoc comm id: nCjtoString] .

  *** 12
  msg to_:_ : String String -> Msg .
  
  *** 13
  msg to_:_ : Oid String -> Msg .
  
  *** 14
  *** Decir orientación canales. Explicar todas las suposiciones.
  *** El canal tiene que comu
  


  
  rl [extremo-canal1] : 
     < O  : Proceso | datos : MSG C < n(O) : Extremo | Ats > >
     < O' : Canal | origen : O, listaOrigen : lstMsg, estado : ok >
  => < O  : Proceso | datos : C < n(O) : Extremo | Ats > >
     < O' : Canal | listaOrigen : MSG y lstMsg > .


endom)


***8
(omod EJEMPLO is
  pr CONFIGURATION .
  pr RED .

  var O : Oid .
  var S : String .

  op ext : Oid String -> Object .
  eq ext(O, S) = < O : Extremo | IP : S, Estado : inactivo, recibido : "", amigos : nCjtoString, centro : null > .

  op cent : Oid String -> Object .
  eq cent(O, S) = < O : Centro | IP : S, Estado : inactivo, recibido : "", amigos : nCjtoString, tabla : nTabla > .

  ops procE procC : Oid String -> Object .
  eq procE(O, S) = < O : Proceso | datos : ext(n(O), S) > .
  eq procC(O, S) = < O : Proceso | datos : cent(n(O), S) > .

  ***( 
  op can : Qid Oid Oid -> Object .
  eq can(Q, O, O') = < Q : Canal | origen : O, destino : O', listaOrigen : nlistaMsg, listaDestino : nlistaMsg, estado : ok > .
  )***

  op init : -> Configuration .
  eq init = 
            cent('c0, "ip0")
            ext('e1, "ip1")
            ext('e2, "ip2")
            ext('e3, "ip3") .

endom)

(frew init .)
