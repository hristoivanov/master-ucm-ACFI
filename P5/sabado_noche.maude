*** Hristo Ivanov Ivanov
*** Alberto Lorente Sánchez
*** Práctica 5. Grupo
*** 2015/12/08
*** Auditoría, Calidad y Fiabilidad Informáticas
*** Máster en Ingeniería Informática

mod SABADO is
  pr STRING .

  *** Alcohol, Refresco, Hielo  
  sort Bolsa .
  op <_,_,_> : Nat Nat Nat -> Bolsa [ctor] .

  sort Status .
  ops normal, vip, manager : -> Status .

  sort Persona .
  *** Nombre, Edad, Rol, Copas, Bolsa
  op |_____| : String Nat Status Nat Bolsa  -> Persona [ctor] .
  *** Nombre, Edad, Rol, Copas
  op |____|  : String Nat Status Nat -> Persona [ctor] .

  sort Botellon .
  subsort Persona < Botellon .
  op nBotellon : -> Botellon [ctor] .
  op __ : Botellon Botellon -> Botellon [ctor assoc comm id: nBotellon] .
  
  sort ListaLocal .
  subsort Persona < ListaLocal .
  op nListaLocal : -> ListaLocal [ctor] .
  op _y_ : ListaLocal ListaLocal -> ListaLocal [ctor assoc id: nListaLocal] .
  
  sort Local .
  *** Aforo, Alcohol, Refrescos, Gente
  op #_,_,_,_# : Nat Nat Nat Botellon -> Local .
  
  sort Noche .
  op \\\_\\\_///_/// : Botellon ListaLocal Local -> Noche [ctor] .
  
  ***************************************************************
  vars P1 P2 P3 P4 : Persona .
  vars B1 B2 B3 B4 : Botellon .
  vars N1 N2 N3 N4 N5 N6 N7 : Nat .
  vars S1 S2 S3 S4 : String .
  vars BA BB BC BD : Bolsa .
  vars SA SB SC SD : Status .
  vars L1 L2 L3 L4 : ListaLocal .
  vars LA LB LC LD : Local .

  ***************************************************************
  *** hayHieloBolsa
  op hHB : Bolsa -> Bool .
  ceq hHB(< N1, N2, N3 >) = true 
      if N3 > 0 .
  ceq hHB(< N1, N2, N3 >) = false 
      if N3 <= 0 .
	  
  *** hayRefrescoBolsa
  op hRB  : Bolsa -> Bool .
  ceq hRB(< N1, N2, N3 >) = true 
      if N2 > 0 .
  ceq hRB(< N1, N2, N3 >) = false 
      if N2 <= 0 .
	  
  *** hayAlcoholBolsa
  op hAB  : Bolsa -> Bool .
  ceq hAB(< N1, N2, N3 >) = true 
      if N1 > 0 .
  ceq hAB(< N1, N2, N3 >) = false 
      if N1 <= 0 .
	  
  *** hayHielo  (En la bolsa o en el botellon)
  op hH : Botellon -> Bool .
  eq hH(| S1 N1 SA N2 BA | B1) = hHB(BA) or hH(B1) .
  eq hH(| S1 N1 SA N2 | B1) = hH(B1) .
  eq hH(nBotellon) = false .
  
  *** restarHielo (de la Bolsa)
  op rH : Bolsa -> Bolsa .
  eq rH(< N1, N2, N3 >) = < N1, N2, sd(N3, 1) > .
  
  *** restarRefresco (de la Bolsa)
  op rR : Bolsa -> Bolsa .
  eq rR(< N1, N2, N3 >) = < N1, sd(N2, 1), N3 > .
  
  *** restarAlcohol (de la Bolsa)
  op rA : Bolsa -> Bolsa .
  eq rA(< N1, N2, N3 >) = < sd(N1, 1), N2, N3 > .
  
  *** tomarPrestadoHielos (del Botellon)
  op tPH : Botellon -> Botellon .
  ceq tPH(| S1 N1 SA N2 BA | B1) = | S1 N1 SA N2 rH(BA) | B1 
    if hHB(BA) .
  ceq tPH(| S1 N1 SA N2 BA | B1) = tPH(B1) 
    if not hHB(BA) .

  op insertaListaLocal : Persona ListaLocal -> ListaLocal .
  eq insertaListaLocal(| S1 N1 normal N2 BA |, L1) = | S1 N1 normal N2 BA | y L1 .
  eq insertaListaLocal(| S1 N1 SA N2 BA |, nListaLocal) = | S1 N1 SA N2 BA | .
  eq insertaListaLocal(| S1 N1 vip N2 BA |, L1 y | S2 N3 normal N4 BB | ) =  L1 y | S2 N3 normal N4 BB | y | S1 N1 vip N2 BA | .
  eq insertaListaLocal(| S1 N1 vip N2 BA |, L1 y | S2 N3 vip N4 BB | ) =  insertaListaLocal(| S1 N1 vip N2 BA |, L1) y | S2 N3 vip N4 BB | .
  
  ***********************************///INICIO - ALBERTO\\\***********************************
  *** COMPROBAR CON MAUDE
  *** True - If P1 es menor
  op esMenor : Persona -> Bool .
  eq esMenor(| S1 N1 SA N2 BA |) = 
   if N1 < 18 then true
   else false
   fi .
  
  *** haBebidoDemasiado. True - If P1 ha bebido 3 o más copas
  op hBD : Persona -> Bool .
  eq hBD(| S1 N1 SA N2 BA |) = 
   if N2 >= 3 then true
   else false
   fi .
  
  *** Cantidad de gente Local
  op localNoLLeno : Local -> Bool .
  eq localNoLLeno(# N1, N2, N3, B1 #) = 
   if cantidadGente(B1) < N1 then true
   else false
   fi .
  
  op cantidadGente : Botellon -> Nat .
  eq cantidadGente(P1 B1) = 1 + cantidadGente(B1) .
  eq cantidadGente(nBotellon) = 0 [owise] .
  
  *** Pasa a una persona de la cola al Local
  op entraLocal : Persona Local -> Local .
  eq entraLocal(| S1 N1 SA N2 BA |, # N3, N4, N5, B1 #) = # N3, N4, N5, (| S1 N1 SA N2 |  B1) # .

  
  ***********************************///FIN - ALBERTO\\\***********************************
  
  ***************************************************************
  crl [botellon-tomar-refresco-todo-bolsa] :  
     | S1 N1 SA N2 BA | B1 
  => | S1 N1 SA N2 rR(rH(BA)) | B1 
    if hHB(BA) and hRB(BA) .  

  crl[botellon-tomar-refresco-botellon-bolsa] : 
     | S1 N1 SA N2 BA | B1 
  => | S1 N1 SA N2 rR(BA) | tPH(B1) 
    if not hHB(BA) and hH(B1) and hRB(BA) .

  crl[botellon-tomar-alcohol-todo-bolsa] : 
     | S1 N1 SA N2 BA | B1 
  => | S1 N1 SA (s(N2)) rA(rR(rH(BA))) | B1 
    if hHB(BA) and hRB(BA) and hAB(BA) .  

  crl[botellon-tomar-alcohol-botellon-bolsa] : 
     | S1 N1 SA N2 BA | B1 
  => | S1 N1 SA (s(N2)) rA(rR(BA)) | tPH(B1) 
    if not hHB(BA) and hH(B1) and hRB(BA) and hAB(BA) .
  
  crl[ponerse-a-la-cola] :
     \\\ | S1 N1 SA N2 BA | B1 \\\ L1 /// LA ///
  => \\\ B1 \\\ insertaListaLocal(| S1 N1 SA N2 BA |, L1) /// LA /// 
    if SA =/= manager .

  crl[cola-botellon] :
     \\\ B1 \\\ L1 y P1 /// LA ///
  => \\\ P1 B1 \\\ L1 /// LA /// 
    if esMenor(P1) or hBD(P1) . *** haBebidoDemasiado 

	
  ***********************************///INICIO - ALBERTO\\\***********************************

  crl[cola-local] :
     \\\ B1 \\\ L1 y P1 /// LA ///
  => \\\ B1 \\\ L1 /// entraLocal(P1, LA) /// 
    if not esMenor(P1) and  not hBD(P1) and localNoLLeno(LA) . 
  ***(
  crl[local-tomar-refresco] :
     # N1, N2, N3, (| S1 N4 SA N5 | B1) #
  => # N1, N2, (sd(N3,1)), (| S1 N4 SA N5 | B1) #
    if N3 > 0 and (SA == vip or SA == normal) .
  )
  crl[local-tomar-copa] :
     # N1, N2, N3, (| S1 N4 SA N5 | B1) #
  => # N1, (sd(N2,1)), (sd(N3,1)), (| S1 N4 SA (N5 + 1) | B1) #
    if N2 > 0  and N3 > 0 and N5 < 4 and (SA == vip or SA == normal) .	
  	
  crl[echar-del-local] :
     # N1, N2, N3, (| S1 N4 SA N5 | B1) #
  => # N1, N2, N3, (B1) #
    if N5 >= 4 and (SA == vip or SA == normal) .

  crl[volver-a-casa] :
     # N1, N2, N3, (| S1 N4 SA N5 | B1) #  
  => # N1, N2, N3, B1 #	
    if SA == vip or SA == normal .
  
 ***********************************///FIN - ALBERTO\\\***********************************

  op initB : Nat Nat Nat -> Bolsa .
  eq initB(N1, N2, N3) = < N1, N2, N3 > .
  op initP : String Nat Status Nat Bolsa -> Persona .
  eq initP(S1, N1, SA, N2, BA) = | S1 N1 SA N2 BA | .

  op initM : String Nat Status Nat -> Persona .
  eq initM(S1, N1, SA, N2) = | S1 N1 SA N2 | . 
  
  op init : -> Botellon .
  eq init = initP("Jose"      , 30, normal  , 6, initB(2, 1, 1)) 
            initP("Mariano"   , 30, normal  , 0, initB(0, 0, 1))
            initP("Hristo"    , 30, normal  , 0, initB(0, 0, 0))	
            ***initP("Zafiro"    , 17, normal  , 0, initB(1, 2, 1))
            initP("Gildo"     , 30, vip     , 0, initB(1, 0, 1))
            initP("Luisma"    , 30, vip     , 0, initB(1, 2, 0)) . 
  
  op initLocal : -> Botellon . 
  eq initLocal = initM("Dabi" , 23, manager, 0) .

  op listaEntrada : -> ListaLocal .
  eq listaEntrada = insertaListaLocal(initP("Jose", 30, normal, 0, initB(2, 1, 1)), nListaLocal) .

  op initn : -> Noche .
  ***eq initn = \\\ nBotellon \\\ listaEntrada /// # 5, 6, 5, initLocal # /// .
  eq initn = \\\ init \\\ nListaLocal /// # 5, 6, 5, initLocal # /// .
endm

***frew init .
frew																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																											 initn . 

load model-checker.maude
load full-maude.maude

mod PROPS is
  pr SATISFACTION .
  pr SABADO .
  subsort Noche < State .

  ***************************************************************
  vars P1 P2 P3 P4 : Persona .
  vars B1 B2 B3 B4 : Botellon .
  vars N1 N2 N3 N4 N5 N6 N7 : Nat .
  vars S1 S2 S3 S4 : String .
  vars BA BB BC BD : Bolsa .
  vars SA SB SC SD : Status .
  vars L1 L2 L3 L4 : ListaLocal .
  vars LA LB LC LD : Local .
  ***************************************************************	
 
  *** Si se ha acabado el alcohol en el local.
  op quedaAlcoholLocal : -> Prop [ctor] .
  eq \\\ B1 \\\ L1 /// LA /// |= quedaAlcoholLocal = getAlcoholLocal(LA) > 0 .
  
  op getAlcoholLocal : Local -> Nat .
  eq getAlcoholLocal(# N1, N2, N3, B1 #) = N2 .
  
  ***Si se han acabado los refrescos en el local.
  op quedaRefrescosLocal : -> Prop [ctor] .
  eq \\\ B1 \\\ L1 /// LA /// |= quedaRefrescosLocal = getRefrescoslLocal(LA) > 0 .
  
  op getRefrescoslLocal : Local -> Nat .
  eq getRefrescoslLocal(# N1, N2, N3, B1 #) = N3 .
  
  ***Si alguien (identificado por su nombre) está en la cola.
  op estaEnLacola : String -> Prop [ctor] .
  eq \\\ B1 \\\ L1 /// LA /// |= estaEnLacola(S1) = estaEnLaColaAUX( L1 , S1 ) .
  
  op estaEnLaColaAUX : ListaLocal String -> Bool .
  ceq estaEnLaColaAUX((L1 y | S1 N1 SA N2 BA |) , S2) = true
   if S2 == S1 .
  ceq estaEnLaColaAUX((L1 y | S1 N1 SA N2 BA |) , S2) = estaEnLaColaAUX(L1,S2)
   if S2 =/= S1 .
  ceq estaEnLaColaAUX((L1 y | S1 N1 SA N2 BA |) , S2) = false  
   if L1 == nListaLocal . 

  ***Si alguien (identificado por su nombre) está en el local.
  op estaEnElLocal : String -> Prop [ctor] .
  eq \\\ B1 \\\ L1 /// # N1, N2, N3, B2 # /// |= estaEnElLocal(S1) = estaEnElLocalAUX(B2, S1) .
  
  op estaEnElLocalAUX : Botellon String -> Bool .
  eq estaEnElLocalAUX((| S1 N4 SA N5 | B1) , S1) = true .
  eq estaEnElLocalAUX(B1 , S2) = false [owise] .
  
  ***
  ***Si el número de personas en el interior del local es menor de un cierto número dado como argumento.
  op numPersonasLocalMenorQue : Nat -> Prop [ctor] .
  eq \\\ B1 \\\ L1 /// # N1, N2, N3, B2 # /// |= numPersonasLocalMenorQue(N4) = cantidadGente(B2) < N4 .
  
  op cantidadGente : Botellon -> Nat .
  eq cantidadGente(P1 B1) = 1 + cantidadGente(B1) .
  eq cantidadGente(nBotellon) = 0 [owise] .
  
  ***Si una persona ha bebido demasiado (3 o más copas fuera del local o 4 o más dentro).
  op hayBorrachos : -> Prop [ctor] .
  eq \\\ B1 \\\ L1 /// # N1, N2, N3, B2 # /// |= hayBorrachos = hayBorrachosLocal(B2) or hayBorrachosBotellon(B1) .
  
  ops hayBorrachosBotellon hayBorrachosLocal : Botellon -> Bool .
  ceq hayBorrachosBotellon(| S1 N1 SA N2 BA | B1) = true
    if N2 >= 3 .
  ceq hayBorrachosBotellon(| S1 N1 SA N2 BA | B1) = hayBorrachosBotellon(B1)
    if N2 < 3 .	
  eq hayBorrachosBotellon(nBotellon) = false [owise] .
  
  ceq hayBorrachosLocal(| S1 N1 SA N2 | B1) = true
    if N2 >= 4 .
  ceq hayBorrachosLocal(| S1 N1 SA N2 | B1) = hayBorrachosLocal(B1)
    if N2 < 4 .	
  eq hayBorrachosLocal(nBotellon) = false [owise] . 
  
  ***Si queda hielo en la zona de botellón
  op quedaHielo : -> Prop [ctor] .
  eq \\\ B1 \\\ L1 /// LA /// |= quedaHielo = hH(B1) .
  
  op hH : Botellon -> Bool .
  eq hH(| S1 N1 SA N2 BA | B1) = hHB(BA) or hH(B1) .
  eq hH(| S1 N1 SA N2 | B1) = hH(B1) .
  eq hH(nBotellon) = false .
  
  op hHB : Bolsa -> Bool .
  ceq hHB(< N1, N2, N3 >) = true 
      if N3 > 0 .
  ceq hHB(< N1, N2, N3 >) = false 
      if N3 <= 0 .

  ***Si quedan refrescos en la zona de botellón.
  op quedaRefresco : -> Prop [ctor] .
  eq \\\ B1 \\\ L1 /// LA /// |= quedaRefresco = hR(B1) .
  
  op hR : Botellon -> Bool .
  eq hR(| S1 N1 SA N2 BA | B1) = hRB(BA) or hR(B1) .
  eq hR(| S1 N1 SA N2 | B1) = hR(B1) .
  eq hR(nBotellon) = false .
  
  op hRB  : Bolsa -> Bool .
  ceq hRB(< N1, N2, N3 >) = true 
      if N2 > 0 .
  ceq hRB(< N1, N2, N3 >) = false 
      if N2 <= 0 .

  ***Si queda alcohol en la zona de botellón.
  op quedaAlcohol : -> Prop [ctor] .
  eq \\\ B1 \\\ L1 /// LA /// |= quedaAlcohol = hA(B1) .

  op hA : Botellon -> Bool .
  eq hA(| S1 N1 SA N2 BA | B1) = hAB(BA) or hA(B1) .
  eq hA(| S1 N1 SA N2 | B1) = hA(B1) .
  eq hA(nBotellon) = false .

  op hAB  : Bolsa -> Bool .
  ceq hAB(< N1, N2, N3 >) = true 
      if N1 > 0 .
  ceq hAB(< N1, N2, N3 >) = false 
      if N1 <= 0 . 

endm

mod CHECK is
  pr PROPS .
  pr MODEL-CHECKER .
  pr LTL-SIMPLIFIER .
endm

***Ejercicio 4
***"Dabi" siempre está en el local.
***red modelCheck(initn, [] estaEnElLocal("Dabi")) .                                          ***COMPROBADO
*** True => Dabi siempre esta en el Local, no bebe y no se va a ningun lado
***Si el aforo no se supera al principio, entonces no se supera nunca.
***red modelCheck(initn, <> numPersonasLocalMenorQue(6) -> [] numPersonasLocalMenorQue(6)) .     ***COMPROBADO
*** True =>  Si el aforo es menor que 6 (es <6) entonces jamas se superara el aforo
***Si alguien está en la cola acaba entrando.
red modelCheck(initn, estaEnLacola("Jose") -> <> estaEnElLocal("Jose")) .
***El alcohol nunca se acaba.
***red modelCheck(initn, [] quedaAlcoholLocal()) .
***Los refrescos siempre se acaban.
***red modelCheck(initn, [] not quedaRefrescosLocal) .
***En algún momento alguien bebe de más, y permanece en ese estado para siempre.
***WHAT?(red modelCheck(initn, XXX) .)
***Si hay hielo, refrescos y alcohol en la zona de botellón, entonces en algun momento alguien bebe de más.
***WHAT2.0?(red modelCheck(initn, [] estaEnElLocal("Dabi")) .)
