*** Hristo Ivanov Ivanov
*** Alberto Lorente Sánchez
*** Práctica 5. Grupo
*** 2015/12/08
*** Auditoría, Calidad y Fiabilidad Informáticas
*** Máster en Ingeniería Informática

mod SABADO is
  pr STRING .

  *** Alcohol, Refresco, Hielo  
  sort Bolsa .
  op <_,_,_> : Nat Nat Nat -> Bolsa [ctor] .

  sort Status .
  ops normal, vip, manager : -> Status .

  sort Persona .
  *** Nombre, Edad, Rol, Copas, Bolsa
  op |_____| : String Nat Status Nat Bolsa  -> Persona [ctor] .
  *** Nombre, Edad, Rol, Copas
  op |____|  : String Nat Status Nat -> Persona [ctor] .

  sort Botellon .
  subsort Persona < Botellon .
  op nBotellon : -> Botellon [ctor] .
  op __ : Botellon Botellon -> Botellon [ctor assoc comm id: nBotellon] .
  
  sort ListaLocal .
  subsort Persona < ListaLocal .
  op nListaLocal : -> ListaLocal [ctor] .
  op _y_ : ListaLocal ListaLocal -> ListaLocal [ctor assoc id: nListaLocal] .
  
  sort Local .
  *** Aforo, Alcohol, Refrescos, Gente
  op #_,_,_,_# : Nat Nat Nat Botellon -> Local .
  
  sort Noche .
  op \\\_\\\_///_/// : Botellon ListaLocal Local -> Noche [ctor] .
  
  ***************************************************************
  vars P1 P2 P3 P4 : Persona .
  vars B1 B2 B3 B4 : Botellon .
  vars N1 N2 N3 N4 N5 N6 N7 : Nat .
  vars S1 S2 S3 S4 : String .
  vars BA BB BC BD : Bolsa .
  vars SA SB SC SD : Status .
  vars L1 L2 L3 L4 : ListaLocal .
  vars LA LB LC LD : Local .

  *********************************************************
  *** hayHieloBolsa
  op hHB : Bolsa -> Bool .
  ceq hHB(< N1, N2, N3 >) = true 
      if N3 > 0 .
  ceq hHB(< N1, N2, N3 >) = false 
      if N3 <= 0 .
	  
  *** hayRefrescoBolsa
  op hRB  : Bolsa -> Bool .
  ceq hRB(< N1, N2, N3 >) = true 
      if N2 > 0 .
  ceq hRB(< N1, N2, N3 >) = false 
      if N2 <= 0 .
	  
  *** hayAlcoholBolsa
  op hAB  : Bolsa -> Bool .
  ceq hAB(< N1, N2, N3 >) = true 
      if N1 > 0 .
  ceq hAB(< N1, N2, N3 >) = false 
      if N1 <= 0 .
	  
  *** hayHielo  (En la bolsa o en el botellon)
  op hH : Botellon -> Bool .
  eq hH(| S1 N1 SA N2 BA | B1) = hHB(BA) or hH(B1) .
  eq hH(| S1 N1 SA N2 | B1) = hH(B1) .
  eq hH(nBotellon) = false .
  
  *** restarHielo (de la Bolsa)
  op rH : Bolsa -> Bolsa .
  eq rH(< N1, N2, N3 >) = < N1, N2, sd(N3, 1) > .
  
  *** restarRefresco (de la Bolsa)
  op rR : Bolsa -> Bolsa .
  eq rR(< N1, N2, N3 >) = < N1, sd(N2, 1), N3 > .
  
  *** restarAlcohol (de la Bolsa)
  op rA : Bolsa -> Bolsa .
  eq rA(< N1, N2, N3 >) = < sd(N1, 1), N2, N3 > .
  
  *** tomarPrestadoHielos (del Botellon)
  op tPH : Botellon -> Botellon .
  ceq tPH(| S1 N1 SA N2 BA | B1) = | S1 N1 SA N2 rH(BA) | B1 
    if hHB(BA) .
  ceq tPH(| S1 N1 SA N2 BA | B1) = tPH(B1) 
    if not hHB(BA) .

  op insertaListaLocal : Persona ListaLocal -> ListaLocal .
  eq insertaListaLocal(| S1 N1 normal N2 BA |, L1) = | S1 N1 normal N2 BA | y L1 .
  eq insertaListaLocal(| S1 N1 vip N2 BA |, L1 y | S2 N3 normal N4 BB | ) =  L1 y | S2 N3 normal N4 BB | y | S1 N1 vip N2 BA | .
  eq insertaListaLocal(| S1 N1 vip N2 BA |, L1 y | S2 N3 vip N4 BB | ) =  insertaListaLocal(| S1 N1 vip N2 BA |, L1) y | S2 N3 vip N4 BB | .
  
  ***********************************///INICIO - COMPROBAR\\\***********************************
  *** COMPROBAR CON MAUDE
  *** True - If P1 es menor
  op esMenor : Persona -> Bool .
  ceq esMenor(| S1 N1 SA N2 BA |) = true
    if N1 < 18 . 
  eq esMenor(P1) = false [owise] .	
  
  *** haBebidoDemasiado. True - If P1 ha bebido 3 o más copas
  op hBD : Persona -> Bool .
  ceq hBD(| S1 N1 SA N2 BA |) = true
    if N2 >= 3 . 
  eq hBD(P1) = false [owise] .
  
  *** Cantidad de gente Local
  op localNoLLeno : Local -> Bool .
  ceq localNoLLeno(# N1, N2, N3, B1 #) = true
    if cantidadGente(B1) < N1 .
  eq localNoLLeno(# N1, N2, N3, B1 #) = false [owise] .
  
  op cantidadGente : Botellon -> Nat .
  eq cantidadGente(P1 B1) = 1 + cantidadGente(B1) .
  eq cantidadGente(nBotellon) = 0 [owise] .
  
  *** Pasa a una persona de la cola al Local
  op entraLocal : Persona Local -> Local .
  eq entraLocal(| S1 N1 SA N2 BA |, # N3, N4, N5, B1 #) = # N3, N4, N5, (| S1 N1 SA N2 |  B1) # .
 
  
  
  ***********************************///FIN - COMPROBAR\\\***********************************
  
  *********************************************************
  crl [botellon-tomar-refresco-todo-bolsa] :  
     | S1 N1 SA N2 BA | B1 
  => | S1 N1 SA N2 rR(rH(BA)) | B1 
    if hHB(BA) and hRB(BA) .  

  crl[botellon-tomar-refresco-botellon-bolsa] : 
     | S1 N1 SA N2 BA | B1 
  => | S1 N1 SA N2 rR(BA) | tPH(B1) 
    if not hHB(BA) and hH(B1) and hRB(BA) .

  crl[botellon-tomar-alcohol-todo-bolsa] : 
     | S1 N1 SA N2 BA | B1 
  => | S1 N1 SA (s(N2)) rA(rR(rH(BA))) | B1 
    if hHB(BA) and hRB(BA) and hAB(BA) .  

  crl[botellon-tomar-alcohol-botellon-bolsa] : 
     | S1 N1 SA N2 BA | B1 
  => | S1 N1 SA (s(N2)) rA(rR(BA)) | tPH(B1) 
    if not hHB(BA) and hH(B1) and hRB(BA) and hAB(BA) .
  
  rl[ponerse-a-la-cola] :
     \\\ P1 B1 \\\ L1 /// LA ///
  => \\\ B1 \\\ insertaListaLocal(P1, L1) /// LA /// .

  crl[cola-botellon] :
     \\\ B1 \\\ L1 y P1 /// LA ///
  => \\\ P1 B1 \\\ L1 /// LA /// 
    if esMenor(P1) or hBD(P1) . *** haBebidoDemasiado 

	
  ***********************************///INICIO - COMPROBAR\\\***********************************
  
  crl[cola-local] :
     \\\ B1 \\\ L1 y P1 /// LA ///
  => \\\ B1 \\\ L1 /// entraLocal(P1, LA) /// 
    if not esMenor(P1) and  not hBD(P1) and localNoLLeno(LA) . 
	
  crl[local-tomar-refresco] :
     # N1, N2, N3, | S1 N4 SA N5 | B1 #
  => # N1, N2, sd(N3,1), | S1 N4 SA N5 | B1 #
    if N3 > 0 .
	
  crl[local-tomar-copa] :
     # N1, N2, N3, | S1 N4 SA N5 | B1 #
  => # N1, sd(N2,1), sd(N3,1), | S1 N4 SA (N5+1) | B1 #
    if N2 > 0  and N3 > 0 and N5 < 4 .	
	
  crl[echar-del-local] :
     # N1, N2, N3, | "dabi" N6 manager N7 | | S1 N4 SA N5 | B1 #
  => # N1, N2, N3, | "dabi" N6 manager N7 | B1 #
    if N5 >= 4 .

  rl[volver-a-casa] :
     # N1, N2, N3, | S1 N4 (normal or vip) N5 | B1 #   ***esto se puede hacer?
  => # N1, N2, N3, B1 #	.
 ***********************************///FIN - COMPROBAR\\\***********************************
  
  
  op initB : Nat Nat Nat -> Bolsa .
  eq initB(N1, N2, N3) = < N1, N2, N3 > .
  op initP : String Nat Status Nat Bolsa -> Persona .
  eq initP(S1, N1, SA, N2, BA) = | S1 N1 SA N2 BA | .
  
  ops init initLocal: -> Botellon .
  eq init = initP("Jose"      , 30, normal  , 0, initB(2, 1, 1)) 
            initP("Mariano"   , 30, normal  , 0, initB(0, 0, 1))
            initP("Hristo"    , 30, normal  , 0, initB(0, 0, 0))	
            initP("Alberto"   , 17, normal  , 0, initB(1, 2, 1))
            initP("Gildo"     , 30, vip     , 0, initB(1, 0, 1))
            initP("Luisma"    , 30, vip     , 0, initB(1, 2, 0)) . 
  eq initLocal = initP("Dabi", 23, manager  , 0)) .
  
  op initn : -> Noche .
  eq initn = \\\ init \\\ nListaLocal /// # 5, 6, 5, initLocal # /// .

endm 

frew init .
frew initn .
